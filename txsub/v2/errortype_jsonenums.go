// generated by jsonenums -type=ErrorType; DO NOT EDIT
package txsub

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stubs for imports
	_ = json.Delim('s')
	_ = driver.Int32

}

var ErrErrorTypeInvalid = errors.New("ErrorType is invalid")

func init() {
	var v ErrorType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ErrorTypeNameToValue = map[string]ErrorType{
			interface{}(Timeout).(fmt.Stringer).String():    Timeout,
			interface{}(RejectedTx).(fmt.Stringer).String(): RejectedTx,
		}
	}
}

var _ErrorTypeNameToValue = map[string]ErrorType{
	"Timeout":    Timeout,
	"RejectedTx": RejectedTx,
}

var _ErrorTypeValueToName = map[ErrorType]string{
	Timeout:    "Timeout",
	RejectedTx: "RejectedTx",
}

// String is generated so ErrorType satisfies fmt.Stringer.
func (r ErrorType) String() string {
	s, ok := _ErrorTypeValueToName[r]
	if !ok {
		return fmt.Sprintf("ErrorType(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for ErrorType.
func (r ErrorType) Validate() error {
	_, ok := _ErrorTypeValueToName[r]
	if !ok {
		return ErrErrorTypeInvalid
	}
	return nil
}

// MarshalJSON is generated so ErrorType satisfies json.Marshaler.
func (r ErrorType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ErrorTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ErrorType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ErrorType satisfies json.Unmarshaler.
func (r *ErrorType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ErrorType should be a string, got %s", data)
	}
	v, ok := _ErrorTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ErrorType %q", s)
	}
	*r = v
	return nil
}

func (t *ErrorType) Scan(src interface{}) error {
	i, ok := src.(int64)
	if !ok {
		return fmt.Errorf("can't scan from %T", src)
	}
	*t = ErrorType(i)
	return nil
}

func (t ErrorType) Value() (driver.Value, error) {
	return int64(t), nil
}
