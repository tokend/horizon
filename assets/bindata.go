// Code generated by go-bindata.
// sources:
// templates/admin_notification.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAdmin_notificationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x8f\xdb\xb8\x11\xfe\xbe\xbf\x82\x51\x90\x43\x0b\x84\x96\xec\x7d\xb9\x5b\x49\x36\x9a\x6c\x0e\x4d\x81\xbb\x5e\xd0\x6e\xd1\x16\x45\x3f\xd0\xe2\xd8\x62\x43\x91\x2a\x49\xbf\xc5\xd8\x1f\xd4\xbf\xd1\x5f\x56\x50\x94\x6c\xda\x96\xbc\xd9\x24\x9b\xa4\x39\x63\x3f\xac\xf8\x36\x1c\xce\xcc\x33\xf3\xd0\x52\xfa\xe4\xd5\x2f\x37\xb7\x7f\x7f\xf3\x23\xca\x4d\xc1\xd1\x9b\xbf\xbc\xfc\xe9\x0f\x37\x28\xc0\x61\xf8\xd7\xf3\x9b\x30\x7c\x75\xfb\x0a\xfd\xed\xf5\xed\xcf\x3f\xa1\x7e\x2f\x42\xb7\x8a\x08\xcd\x0c\x93\x82\xf0\x30\xfc\xf1\x8f\x01\x0a\x72\x63\xca\x38\x0c\x17\x8b\x45\x6f\x71\xde\x93\x6a\x1a\xde\xfe\x29\x5c\x5a\x59\x7d\xbb\xb8\x7e\xc4\xc6\x5b\xd9\xa3\x86\x06\xa3\xb3\xb4\xda\x70\x59\x70\xa1\x87\x2d\x62\xfa\xd7\xd7\xd7\x6e\x75\x80\x38\x11\xd3\x61\x00\x22\xb0\xd3\xe3\x6d\x4b\x9b\x15\x87\x61\x30\x26\xd9\xdb\xa9\x92\x33\x41\xe3\xa7\x93\x73\xfb\xf7\x84\x15\xa5\x54\x86\x08\x53\x6d\x04\x84\x8e\xce\x10\x4a\x0b\x30\x04\xd9\xad\x30\xfc\x7b\xc6\xe6\xc3\xe0\x46\x0a\x03\xc2\xe0\xdb\x55\x09\x01\xca\x5c\x6b\x18\x18\x58\x9a\xd0\x6e\x9d\xa0\x2c\x27\x4a\x83\x19\xce\xcc\x04\xff\x10\x6c\xa5\x08\x52\xc0\x30\x98\x33\x58\xd8\x8d\xbc\xb5\x0b\x46\x4d\x3e\xa4\x30\x67\x19\xe0\xaa\xe1\x56\x19\x66\x38\x8c\x5e\xce\x38\x67\x52\xdc\x48\x26\xd0\x0b\x5a\x30\xc1\xb4\x51\xc4\xb0\x39\xa4\xa1\x9b\x61\xe7\x56\xe7\x1a\xfd\xae\x00\xca\x08\x92\x82\xaf\x90\xce\x14\x80\x58\x5b\x9d\xd6\x05\x13\x38\x07\x36\xcd\x4d\xdc\x8f\xa2\x67\xc9\xe1\xf1\xef\xee\x0e\xd7\x22\x22\x28\xfa\x4d\x41\x96\x4e\xa9\xf8\xf2\xfa\xaa\x5c\xfe\x76\xdd\xd3\x05\xe1\x1c\x4f\xb8\x24\x06\x67\x20\x0c\xa8\x75\x41\xd4\x94\x89\x38\x42\x64\x66\xe4\xd6\x94\x49\x35\x29\x16\x52\x80\xd7\x69\x6d\x85\x09\x67\x53\x11\xbb\xe5\xdb\xb1\x07\xa8\x61\xc8\x98\x43\x6f\x2c\xe9\x0a\xb1\x62\xba\x76\x63\x76\xfb\xa4\x3e\xa9\x7d\xbe\xf3\x66\x35\xaa\x32\x51\x0b\x8a\xbc\x7d\xbd\x79\x3d\xeb\x18\xc2\x04\xa8\x5a\xe8\xf5\xe5\xb3\xce\x99\x7c\x56\x08\xbd\xf6\x76\xf4\xce\x89\x0b\xf9\x0e\x8f\xe5\x12\x6b\xf6\x8e\x89\x69\x3c\x96\x8a\x82\xb2\x3d\x09\x5e\xc0\xf8\x2d\x33\x1d\xa3\xed\xbd\x25\xa1\x94\x89\x29\xe6\x30\x31\x71\xff\xaa\x5c\x7a\x5b\x35\x63\xca\xf9\x78\x67\xb0\x4d\xe3\xad\xea\x3b\x52\xa3\x4e\x91\xdd\xb6\xe2\x9c\x94\x1a\x3e\x4e\x60\x5e\xc7\xd4\xd5\x9a\x32\x5d\x72\xb2\x8a\x99\xe0\x4c\x00\x1e\x73\x99\xbd\xf5\x64\xd4\x11\x10\x3d\x6b\x5b\xdd\x1f\xbc\xdf\x72\x0b\x01\x6f\xfd\xc6\x26\x6d\x82\xde\x4b\x82\x33\x48\x01\x62\xb6\xbe\x67\x1c\x19\xfa\xdc\x6f\xe5\x5e\xdc\x7a\xbb\x1c\x3f\x86\x27\xaf\x37\x07\x65\x58\x46\xf8\xae\x60\xaf\x3b\xef\x3a\x8a\x27\xe5\x1f\x15\x18\x87\x0e\x20\xff\x6c\x55\xe9\xee\x2e\x0d\x5d\x8e\x39\x4b\x43\x97\x1d\xd3\x2a\x02\xea\x84\x7a\x2c\xd6\x0b\x8d\x2b\xc8\x6b\xf6\x0e\x30\xa1\xff\x9a\xe9\x3a\x0d\x1d\x47\x41\x33\xda\xbe\xf6\xe7\x3a\xe3\xb4\xe4\x32\xcf\x90\xed\x92\x33\xc9\xa5\x8a\x9f\x46\xc4\xfe\x25\x13\x29\x0c\x9e\x90\x82\xf1\x55\xfc\x1a\xf8\x1c\xac\xe5\x9e\xbf\x50\x8c\xf0\xe7\x9a\x08\x8d\x35\x28\x36\x71\xd3\xac\x1a\x15\xbc\x5c\x73\xe1\x70\x7f\x11\x45\x49\xe5\xa8\x26\xc7\xf6\xce\x93\x26\x23\x26\xdb\x7c\x53\xe9\x5d\xa3\x20\x8e\xfc\x34\x68\xb1\xd2\x1a\x5a\xb6\x16\xe9\x92\x08\x94\x71\xa2\xf5\x30\x28\x15\x58\xe3\x83\xda\x54\xb2\xfa\x2c\xee\xe4\x9b\xc0\xd9\xcb\xb8\x9e\xee\xe5\x72\x57\xd5\x72\x99\xd8\xd4\x5a\x37\xa3\x64\x9b\x67\xa3\xa4\xd0\x12\xe7\x8c\x42\x4c\x38\xf7\xa4\xc9\x92\x64\xcc\xac\xe2\x28\x91\x73\x50\x13\x2e\x17\x71\xce\x28\x05\x91\xcc\x99\x66\x63\xc6\xed\xa0\xeb\x09\x46\x69\x68\xf5\x1f\x9d\xa5\x55\xb8\x35\xe7\xb0\xa1\xb3\x39\xc2\xfb\xba\xb2\xf2\x5f\x93\x70\xe2\xe6\xa1\x19\xd0\x56\xab\xca\xb0\x8f\xe1\x5e\xbf\x7a\x76\xba\xba\xdb\xb7\x0d\x1e\xeb\x3e\x23\x4b\xcf\xdd\x75\xb5\x57\x8d\x3d\x1e\x22\xa6\x5a\x6b\x57\xd3\xc6\xb4\x0e\xc5\x01\x72\x98\xde\x34\xe7\x75\xdb\xae\xd9\x01\x6d\xbe\x2a\x73\x10\xda\x95\xce\x06\x73\x3b\x9d\x5b\xff\x74\xb8\xc0\xf3\xd2\xa3\xd8\xde\x57\xe6\x13\x19\x5f\x2a\x8a\x17\x8a\x94\xf1\x58\x01\x79\x8b\x6d\xbb\x36\x25\x42\xa9\xb3\x19\xa2\xc4\x10\x5c\x5a\x32\x47\x87\xc1\xc6\x68\x5b\x3c\x5f\xfe\x10\x95\xcb\x7d\x3f\xd6\x22\x5c\xb4\xef\xf9\xa0\xf1\x50\xc3\x2f\x90\xcf\xa1\x0e\xe0\x50\x71\xa9\x5d\x4c\x80\xfd\x7b\x00\x12\xb6\xf4\x2b\xd9\x61\x68\xed\xc6\x72\x7a\x74\xc7\x6a\x75\x5e\xef\x90\xf6\x98\x16\xc8\xbb\x3d\x1f\x13\xc6\x5b\x29\xf4\x14\xa3\x47\x63\x74\x2f\xd0\xea\xc8\x52\x72\x81\xf6\xea\xc3\x47\xc5\x4f\x53\x4e\xaa\x4d\x3c\xed\x4b\xe9\x6e\x66\xb1\x02\x5e\x5d\x45\x3e\x20\xe1\xed\x9f\x63\x3f\x92\x3e\x65\x3c\x35\xb2\xf2\xc6\x50\x35\xdd\x44\x9c\xa8\x29\xe0\x2b\xd4\x50\xc0\x09\x53\xda\x20\x4e\xb4\xe9\x80\xe3\xe7\xa4\x0e\xfb\x50\x6d\x08\xf4\x58\x1a\x23\x0b\xaf\x63\x73\x23\x68\xb9\x07\x74\xd0\x8c\xc1\xf7\x17\x7b\x58\x3e\x88\xa9\x26\x80\xde\x3b\x5a\x3e\xa6\xfc\xb5\xeb\xf1\xe9\x7c\xbf\x8d\x80\x7d\xd2\xf1\x59\xc9\x60\xe7\x39\x8e\x28\xbd\x0f\x72\x6b\x70\x1f\xe0\x5f\xcc\x3f\x8d\x72\xed\xc8\x7d\x5c\x4f\x36\x72\x29\x72\x66\x1e\x06\x7d\x5b\x9c\xbe\xe2\xaa\x11\x3d\xa8\x6a\x44\x15\x2f\x6f\xae\x10\x5a\x62\x6f\x14\xab\x19\x87\x18\x96\x24\x33\x7c\xf5\x29\x6a\xca\x77\x4f\x97\x2f\xa2\x24\x0d\x0d\xbd\xc7\x8d\xa1\x51\xf7\xce\xb8\x2f\x1a\xd2\xb0\x8a\xe6\xa3\x53\x58\x31\xdd\xf8\xf5\xc2\xf9\x55\x65\x9b\x9f\xfc\x48\x59\xf6\xc6\xee\x57\xb1\x4c\x32\xd1\x63\x32\xe4\x72\x2a\xb1\x90\x78\x5b\xed\x7a\xa5\x98\x7a\xe1\xa0\x31\xb3\xe4\xa6\x94\xb6\x5e\x49\x81\x0b\x49\x21\x1e\xb3\x6c\x36\x66\x59\x92\x71\x20\x2a\x1e\x4b\x93\x27\x3b\x97\x65\xef\x32\x54\x11\x7f\x39\x33\xd6\x0d\x8d\xa9\x29\x64\x52\x55\xe2\x1c\xc5\xda\xde\x9b\x4f\x68\x3e\xa1\xf9\x84\xe6\x66\x42\xde\x59\xe0\x3b\x35\x38\x22\xb6\x5d\x60\xbb\xa8\x8e\x03\x74\x48\x3f\xe0\xd2\x1f\x80\xca\x6f\x9c\x31\xf7\x07\x35\x65\xee\x0f\xfe\x2f\x39\xf3\x0e\x49\xfe\x00\xda\x7c\x79\x75\xa2\xcd\x27\xda\xfc\x4d\x15\xda\xab\xaf\xbb\xd0\x3e\xec\xc7\x96\xab\x5f\x6f\xa1\x45\x28\xcd\x07\x07\x30\x75\x0f\x9b\xf4\x67\x89\x48\xed\x91\x8b\xf3\xe8\xfa\x62\xf0\x70\x8f\x9c\xb7\x51\x9f\xee\xb7\x1f\x87\xfb\x1f\x79\x03\xb2\x31\xb3\x90\xaa\x20\x3c\x18\xbd\x06\xce\xe5\x93\x34\xcc\x07\x27\xa0\x9f\x80\x7e\x02\x7a\x3d\xa5\xfc\x0c\x38\x7f\xe0\x5b\xce\x07\xe0\x3c\x18\xad\xd7\xa8\xf7\x52\xd2\x15\xba\xbb\x4b\xc3\xf2\x78\x4e\x3b\x62\xd1\x63\x77\x8b\x1d\xf2\x0a\xcb\x92\x08\xda\xf2\x8e\xe5\x0b\xd1\x98\xf6\x8f\x61\x5c\x50\xee\xbf\x42\xad\x33\x4d\x14\x8c\x4e\x57\xa9\xd3\x55\xea\x74\x95\x3a\x5d\xa5\xbe\xc4\x55\xaa\x6c\x82\x57\x48\xc3\x32\x38\x4c\xa4\x8f\x50\x80\x06\x8f\x57\x80\xde\x70\x20\x1a\x10\x95\x48\x48\x83\x14\x94\x7c\x85\x8c\x44\x26\x67\x1a\x41\x41\x18\xef\xdd\x57\x97\xbe\x31\x83\xdc\xc8\x72\x55\x41\x16\xfd\xf7\x3f\x68\x10\xf5\xbf\x47\xde\x77\xa7\x3d\xf4\x82\x73\x54\x0d\x6b\xa4\x40\x83\x9a\x03\x3d\x6e\xa1\x53\x69\xf6\x4d\xf1\xf5\x94\xe6\x7d\x12\xbb\x2f\xf1\x40\xd6\x9e\x94\x34\x74\x5f\x89\xd4\x9f\x1d\xd5\xd2\x9c\x94\xcd\xd4\xf4\x09\xc6\xa8\x54\x30\x07\x61\xd0\xef\x2d\x9c\x90\x14\x88\xfd\xf2\x67\x64\xfd\x81\xac\x7b\x50\x41\x04\x2b\x67\xee\x6d\x0c\xc2\x78\x74\x96\x52\x36\x6f\x62\xc0\xff\x8c\x2d\x59\xe4\xcc\x40\x95\xe4\x21\x16\xd2\x92\xf3\xca\xad\x71\xff\xb2\x5c\xa2\x4c\xce\x14\x03\xb5\xe3\xd8\x28\x18\x7d\x27\xc6\xba\x4c\xd0\xb7\xf3\x2f\x0d\x29\x9b\x5b\x13\x3b\xef\xa4\xd5\xb7\xe6\xa3\xff\x05\x00\x00\xff\xff\x23\xea\xb6\x7b\x8b\x2f\x00\x00")

func templatesAdmin_notificationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAdmin_notificationHtml,
		"templates/admin_notification.html",
	)
}

func templatesAdmin_notificationHtml() (*asset, error) {
	bytes, err := templatesAdmin_notificationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/admin_notification.html", size: 12171, mode: os.FileMode(420), modTime: time.Unix(1507040372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/admin_notification.html": templatesAdmin_notificationHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"admin_notification.html": &bintree{templatesAdmin_notificationHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
