// Code generated by go-bindata.
// sources:
// migrations/0010_trades.sql
// migrations/0011_history_price.sql
// migrations/0012_update_pending_tx_op_key.sql
// migrations/0013_signer_name.sql
// migrations/001_squashed.sql
// migrations/002_add_reference_to_emission_requests.sql
// migrations/003_update_forfeit_request_created_at.sql
// migrations/004_change_asset_length.sql
// migrations/005_change_exchange_kyc.sql
// migrations/006_pending_submitter.sql
// migrations/007_move_forfeit_requests_to_payment.sql
// migrations/008_use_random_salt_in_tx.sql
// migrations/009_use_long_assets.sql
// migrations/014_balance_history.sql
// migrations/015_account_type.sql
// migrations/016_balance_updates_index.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0010_tradesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\x37\x26\x22\x1d\x58\x58\x3a\xa5\xd4\x42\x11\x21\xad\x4c\x3a\x74\x8a\x8e\xe4\xd4\x78\x88\x1d\xec\x0b\x55\xf9\xf5\x08\xb2\x44\x28\x42\x62\xbd\xf7\xe9\xe9\xde\xb7\xd9\xe0\x6e\xb0\x97\x40\xc2\x38\x8d\x4a\x3d\x1a\x9d\xd7\x1a\x75\xbe\x2b\x35\x7a\x1b\xc5\x87\x5b\x23\x81\x3a\x8e\x48\x14\x00\xd8\x0e\xbb\xe2\xe9\x55\x9b\x22\x2f\x51\x1d\x6a\x54\xa7\xb2\xcc\x7e\xa2\x37\x8a\xdc\x50\x8c\x2c\x68\x7b\x0a\xd4\x0a\x07\x7c\x50\xb8\x59\x77\x49\xee\x1f\xd2\x5f\xf8\xfb\xe4\xe5\x3f\xfc\x5c\x3f\xf8\xc9\xc9\xf7\x0b\x45\x55\xaf\x17\xfe\x41\x8c\xc1\xb6\xbc\x1e\xb5\x81\x49\xb8\x6b\x48\x20\x76\xe0\x28\x34\x8c\xb8\x5a\xe9\xfd\x34\x5f\xf0\xe9\x1d\xcf\xec\xd1\x14\x2f\xb9\x39\xe3\x59\x9f\x91\xd8\x2e\x5b\x2c\xcf\x96\xb3\x52\x95\x6e\x95\x5a\x3a\xde\xfb\xab\x53\x7b\x73\x38\xae\x2a\xde\x7e\x05\x00\x00\xff\xff\x6e\xbb\xfb\x15\x8f\x01\x00\x00")

func migrations0010_tradesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0010_tradesSql,
		"migrations/0010_trades.sql",
	)
}

func migrations0010_tradesSql() (*asset, error) {
	bytes, err := migrations0010_tradesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0010_trades.sql", size: 399, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0011_history_priceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\x37\x26\x22\x1d\x58\x58\x3a\x05\xea\x01\x11\xda\xca\x4a\x87\x4e\x95\x6b\x4e\xcd\x49\xc4\x36\xf6\x85\xaa\xfc\x7a\xa4\x30\x24\x8a\x58\xba\x9d\x4e\xdf\xe9\xde\xfb\x56\x2b\x3c\xf4\x7c\x49\x56\x08\x87\xa8\xd4\x8b\xd1\x75\xab\xd1\xd6\xcf\x8d\x46\xc7\x59\x42\xba\x9d\x62\x62\x47\x28\x14\x00\x9c\x6d\xa6\x93\xcd\x99\x04\xae\xb3\xc9\x3a\xa1\x84\x6f\x9b\x6e\xec\x2f\xc5\xe3\x53\x89\xed\xae\xc5\xf6\xd0\x34\xd5\x88\x7f\x0d\x41\xee\xe1\x85\x7b\xca\x62\xfb\x38\x9b\xae\x2c\x5d\x18\x64\xdc\xe0\x27\x78\x5a\xdc\xfc\xc5\xfb\x08\xc3\xf9\x93\x10\x13\x39\xce\x1c\xfc\x02\xda\x9b\xd7\xf7\xda\x1c\xf1\xa6\x8f\x28\xa6\x12\xd5\x3c\x61\x35\x3d\x2d\x55\xb9\x56\x6a\x6e\x67\x13\xae\x5e\x6d\xcc\x6e\xff\x9f\x9c\xf5\x6f\x00\x00\x00\xff\xff\xc2\x80\x4a\xd6\x48\x01\x00\x00")

func migrations0011_history_priceSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0011_history_priceSql,
		"migrations/0011_history_price.sql",
	)
}

func migrations0011_history_priceSql() (*asset, error) {
	bytes, err := migrations0011_history_priceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0011_history_price.sql", size: 328, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0012_update_pending_tx_op_keySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x51\x4f\xbb\x30\x14\xc5\xdf\xef\xa7\xb8\x6f\x8c\xfc\xff\x4b\x74\x71\x4f\x64\x0f\x53\x9a\x48\xd2\x00\xb2\x36\xea\x53\xd3\x6c\x37\x93\x88\x05\x4b\x99\xf8\xed\x0d\xdb\x8c\xa0\x4b\x74\x3c\x41\x6f\x7b\xee\xfd\xf5\xf4\x4c\xa7\xf8\xef\x25\xdf\x5a\xed\x08\x65\x05\x4b\x2e\x58\x86\x62\x79\xcd\x19\x56\x64\x36\xb9\xd9\x2a\x67\xb5\xa9\xf5\xda\xe5\xa5\xa9\xf1\x70\xc0\xb5\x8a\xcc\x8e\x8a\xb2\x22\x14\x8f\x29\x43\x47\xad\x0b\xce\x50\x5b\xaa\x9b\xc2\x8d\xd0\x96\x15\x59\xdd\x15\xd4\x33\xbd\x63\x98\x25\x29\xc6\x89\xc0\x58\x16\x45\x00\x70\x93\xb1\xa5\x60\x28\xe3\xe8\x4e\x32\x8c\xe2\x90\x3d\x74\xcd\x94\x6b\xd5\x40\xa8\x1a\x93\xbf\x36\xa4\x72\xb3\xa1\x16\x10\x93\xf8\xf4\xcc\xc9\x40\xe5\x03\xe2\xfd\x2d\xcb\xd8\xb7\x3a\x46\xab\x23\x04\xe7\x7e\x00\x00\x7d\x53\xc3\xf2\xcd\xc0\x9e\xf3\x8f\x38\x01\x80\x4c\xc3\xee\x1a\x27\x91\x56\x4c\x0c\x4d\x58\x78\x65\xd5\x7d\xbd\x23\xdb\x4f\x34\xc9\xf9\x48\x7f\xbb\x61\x3d\x7b\x7f\xe3\xea\xc5\x62\xe1\xf5\x16\xde\xff\xaf\x37\xdf\x6f\x1c\x7e\xbd\x73\x12\x33\xcc\xdb\x4e\xdb\xf5\x93\xb6\x93\xcb\x8b\xd9\x95\x3f\x36\x78\x9f\x4d\x66\xf3\xb9\x1f\xc0\x47\x00\x00\x00\xff\xff\x8b\xf0\x17\x22\x0a\x03\x00\x00")

func migrations0012_update_pending_tx_op_keySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0012_update_pending_tx_op_keySql,
		"migrations/0012_update_pending_tx_op_key.sql",
	)
}

func migrations0012_update_pending_tx_op_keySql() (*asset, error) {
	bytes, err := migrations0012_update_pending_tx_op_keySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0012_update_pending_tx_op_key.sql", size: 778, mode: os.FileMode(420), modTime: time.Unix(1507040372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0013_signer_nameSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xa1\xae\xc3\x20\x14\x06\x60\xcf\x53\xfc\xae\xe2\xa6\x4f\x50\xc5\x1d\x4c\x9d\xc1\xd2\x80\x26\x64\x23\x04\xd1\xd3\x06\x4e\xb2\x3d\xfe\xc4\xcc\xc4\xc4\xec\x67\xbe\x79\xc6\xdf\xd6\x6a\xcf\x52\x10\x0f\xa5\x29\xd8\x15\x41\xff\x93\xc5\x51\xf8\xde\xb8\x26\xe9\x99\x47\xbe\x49\xdb\x39\x8d\x56\xb9\xf4\x01\x6d\x0c\x4e\x9e\xe2\xc5\xe1\x4d\x89\xf3\x56\x20\xe5\x29\x70\x3e\xc0\x45\x22\x18\x7b\xd6\x91\x02\xa6\x69\x51\xea\x33\x32\xfb\x83\x7f\xae\xcc\xea\xaf\x5f\xae\xe5\x15\x00\x00\xff\xff\xe3\x69\xc4\x9e\xba\x00\x00\x00")

func migrations0013_signer_nameSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0013_signer_nameSql,
		"migrations/0013_signer_name.sql",
	)
}

func migrations0013_signer_nameSql() (*asset, error) {
	bytes, err := migrations0013_signer_nameSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0013_signer_name.sql", size: 186, mode: os.FileMode(420), modTime: time.Unix(1507040372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations001_squashedSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x5f\x6f\xdb\x36\x10\x7f\x0f\x90\xef\xc0\xb7\x24\x58\x52\xac\x40\x17\x6c\xce\x93\x9b\xa8\xab\x31\x47\x5e\x63\x7b\x6d\x50\x14\x02\x2d\x5d\x6c\xae\xb2\xa8\x92\xb4\x63\x77\xd8\x77\x1f\x64\xfd\xb1\x24\x8a\x22\xe5\x48\xee\x1e\x2d\x1d\xef\xee\x77\xbc\x3b\xde\x1d\xe5\xab\x2b\x14\x50\x12\xf0\x10\x5c\x41\x68\x80\xc6\xdf\x7c\x9b\xde\x61\x81\xc7\x74\xc5\x5c\x18\x64\x6f\xde\x51\xf6\x8e\xf8\x70\x7a\x72\x7a\x72\x75\x85\x7e\x5a\x92\x39\xc3\x02\xd0\x34\x8c\x9e\x44\xcf\x76\xcf\x6d\xbc\x84\x1e\x5a\x10\x2e\x28\xdb\x3a\xd8\x75\xe9\x2a\x10\xfc\x06\x4d\xb6\x21\xf4\xd0\xa4\xff\x76\x68\xdd\xa0\xb1\xbb\x80\x25\xee\xa1\x70\x35\xf3\x89\x7b\x83\x46\xcf\x01\xb0\x1e\x0a\x29\x17\x73\x06\x3c\x66\x76\x7a\x72\xfb\x60\xf5\x27\x56\xbc\x48\x62\x89\xce\x4f\x4f\x10\x42\x88\x78\x68\x46\xe6\x1c\x18\xc1\x3e\xb2\x47\x13\x64\x4f\x87\xc3\xcb\xf8\x1d\xf6\x3c\x06\x9c\x23\x77\x81\x19\x76\x05\x30\xb4\xc6\x6c\x4b\x82\xf9\xf9\xf5\x9b\x8b\xd3\x93\x8b\x9b\x1a\xd5\x67\xd8\xc7\x81\x0b\x6d\xaa\x9e\xb2\x2c\xaa\x4e\x02\x51\xd6\x3b\x21\x74\x88\x57\xa1\xfa\x2f\xd7\x17\x12\x4e\xce\x41\x54\x90\xbe\x91\x29\x63\xeb\x19\x73\x86\x8d\xbb\xc0\xc1\xdc\x5c\x95\xaf\x5b\x17\xfd\xcd\x69\x30\xcb\x5e\x18\xda\xd9\x21\x9e\xc3\xe1\x5b\x6a\xee\xb1\xf5\x61\x6a\xd9\xb7\x8d\x2d\x9e\xae\x53\xf1\x8f\xb5\x1c\x4f\xfa\x0f\x13\xf4\x71\x30\x79\x8f\x5e\xc7\x4f\x06\xf6\xed\x83\x75\x6f\xd9\x13\xf4\xf6\x31\x7d\x66\x8f\xd0\xfd\xc0\xfe\xab\x3f\x9c\x5a\xfb\x07\xfd\x4f\xb9\x07\xb7\xfd\xdb\xf7\x16\x7a\xfd\x02\x7c\x68\xf4\xd1\xb6\xee\xd0\xdb\x47\x63\xa0\xfd\xe1\xc4\x7a\xd0\xe2\xcc\xf8\x4a\x04\xaf\x88\x57\xa7\x2f\x2c\x09\xe7\x84\x06\x0e\x83\x6f\x2b\xe0\xad\xc6\xae\xc4\x3b\x8b\x04\xce\x57\xc0\xaa\xe3\x54\x72\xe1\x65\xe4\xc1\x86\xb4\x61\xc8\xe8\x1a\x3c\x34\xa3\xd4\x07\x1c\x24\x8f\x43\x06\xa9\x2a\x3c\xf6\xd6\xe4\x05\x03\xcc\x69\xa0\xe0\x7d\x67\xbd\xeb\x4f\x87\x31\xff\x5e\x4f\xa2\x49\x58\xb8\x0c\xb0\x00\xcf\xc1\x02\x09\xb2\x04\x2e\xf0\x32\x44\xcf\x44\x2c\xe8\x2a\x7e\x82\xbe\xd3\x00\x12\xe2\x55\xe8\x99\x13\x33\x70\x81\xac\x95\x66\x4a\xd5\x3b\x3b\xab\x50\xce\x34\x63\x5c\x37\xe4\x93\x6c\xa4\x23\xa7\x32\x4d\xd8\x4b\xae\xe0\xec\x59\x75\x92\x07\x74\x02\x8f\x9e\x18\x9a\x5a\xa0\xb5\x4c\xa1\x13\x2c\xa7\x0e\x69\xc5\xab\xfd\x8a\x3a\x88\x4f\x94\x3d\x01\x11\x5d\xa4\x92\x32\x6b\xed\x99\x2a\x30\x9b\x57\xbb\xfc\xcb\x52\x0c\x09\x88\x20\xbb\x20\x9e\x6d\x9d\x15\x07\x96\xe6\x9a\x8a\xa3\x17\x42\x21\xe5\xa2\xee\xf2\x45\x6a\x22\xb1\x0d\x01\x91\x40\xc0\x1c\x58\x16\xdd\x3f\x9b\x06\x6a\xd9\xd0\x5d\xc5\xa7\x42\xce\xd1\xc3\xd2\x10\x6f\x6b\xd1\xa8\x90\x27\x07\x61\x99\x50\x73\x8e\xfb\xe0\xcd\x81\xb5\x19\x72\x09\xc7\x34\xd2\x78\xa4\x47\xe0\xee\x5d\xab\xe4\xef\x31\xb9\xb3\xc0\x7c\x61\x16\x49\x21\x83\x35\xa1\x2b\xee\x68\x57\xa6\x21\xcd\x70\xc0\xf1\xae\x39\x71\x76\x65\x6d\x8d\x97\x27\x4b\x68\x08\x0c\x37\x59\xe0\xfa\x94\x6b\x03\x4e\xca\x09\x69\x12\x4a\x7f\x2f\x43\xca\x04\x30\x67\x0d\x2c\xca\xa3\x92\xd8\xd7\x52\xb6\xa2\x02\xfb\x8e\x1b\x35\x66\x8a\x7c\xf6\x04\xe0\x84\x94\xfa\xca\x16\x82\x83\xf3\x04\xca\xdd\xd9\xbd\x67\xc0\x81\xad\x95\x34\x4b\xbc\x71\xc4\xc6\xe1\x20\x1c\x4e\xbe\xcb\x64\x9a\xcc\xb1\xb7\x75\x88\x99\x20\x2e\x09\x71\xbb\xad\x60\xb5\x80\xdc\x49\xa0\xc0\x25\xaf\x57\x9e\x1a\xa5\xae\x53\x4d\x58\xdb\xb2\x35\x2e\xcf\xe0\xe9\x09\x5c\x91\xd4\xa6\x07\x99\xb9\xab\x34\x5d\x2b\xed\xe8\xc9\xba\x11\xf6\xd6\x52\x76\xad\x54\x39\x71\x57\x93\x6b\xd2\x77\xb6\xa8\x93\x80\x31\x28\x97\x72\xb9\x55\x49\x84\xc3\xd0\x27\x6e\x8c\x8d\x32\x0f\x98\x2a\xe2\x0a\x25\x48\xe9\x9d\x07\x02\x13\xbf\xd8\x87\xf1\xdd\xec\x29\x8d\xba\x36\x22\x2a\x39\x53\x76\xe9\xdc\xd9\x25\xee\xba\x7c\x9e\xb2\x0e\xe8\xf3\xb9\x5c\xf1\x79\x10\x08\xf2\x44\xa2\x52\xaf\xd2\x2c\x5c\x60\x91\xc1\x35\x8d\xde\xc8\x7f\x52\xbe\xdd\x46\x6e\x59\xd2\x8f\x8b\x5a\x1d\xe6\xf6\x23\xb6\x2c\xb1\x26\x5a\xa3\x08\x4d\x49\xeb\xd0\x84\x78\xbb\x84\xa0\x93\x26\xa7\xcc\x5a\x1b\xb5\xe9\x02\x25\x41\x3a\xcf\x33\xec\x83\x8e\xdd\xb2\x14\x72\x81\x69\x9d\x51\xb6\x52\x57\x47\x9f\x42\xce\xd1\xc3\xc7\x10\x6f\x6b\xc1\xa3\x90\x27\x87\x4e\x99\x50\x73\xc4\x49\x7c\xf7\xde\x7b\x9c\xfd\x2b\xca\xfb\xf1\xfb\x58\x8f\xbf\xbb\xfd\x2c\xca\x35\xd8\xd7\xfd\x82\x3a\x7c\xf9\x12\xa2\xa3\x0e\x40\x25\xc2\xbc\x07\x30\xaa\x73\xf4\x5d\x80\x26\x45\xa9\xf4\xec\xca\xd5\x35\xf2\x8e\xee\xea\x0d\xf1\xb7\xe6\xea\x1a\xb9\xb2\xab\xab\x16\x68\x52\x59\x6e\x59\x47\xee\x9d\xb9\x74\x5e\x43\xf3\xd9\x4a\x52\xfe\xea\x66\x36\xc6\x05\x7d\x7d\x65\xae\xb8\x74\xcc\xa4\xd7\x4c\x34\xb0\x3a\x64\x55\xb3\x9b\x97\x54\xfa\x8a\x81\x8d\xd8\x38\x10\xac\xc1\xa7\x21\x20\x01\x1b\xb9\x3b\xda\x38\x0c\xf8\xca\x17\xaa\xb7\x4b\x10\x58\xf5\x2e\xc2\xa9\x7c\xcf\xc9\x3c\xc0\x62\xc5\xa0\xea\xd6\xfa\xb7\xeb\x8b\xcf\x5f\xf6\x7d\xcf\x3f\xff\x56\x75\x3e\x9f\xbf\x48\x73\x1c\x58\xd2\x78\x0a\x2c\xb7\x49\x19\xb3\x80\x06\x60\xd2\x48\x45\xcc\x64\x3e\x29\x3a\xb2\x04\x67\x46\x57\x81\xc7\xa3\xed\xf9\x95\x45\xb5\xa6\xe1\x05\x30\x22\x5e\x1a\x3a\x89\x52\x0d\xa3\x3f\x8e\x9d\x91\x3d\x94\xef\x3c\x51\x4c\x71\x3b\x1a\x4e\xef\xed\x68\xb7\xc7\xd6\x64\xdf\xe4\xc1\x46\xac\xb1\x7f\x7e\xa6\xb8\x4a\x3d\xeb\xf5\x18\xcc\x5d\x1f\x73\xde\xec\x4a\x2b\x77\x3b\xd6\x3a\x32\x59\x58\x01\x62\xee\x5e\xae\x16\xaa\xee\x2e\xc8\x14\xbb\x74\x1d\xd3\x01\x64\x49\x46\xa3\x4d\x55\xcc\xd9\x4d\x01\x2a\x66\x8d\x1d\xc0\x54\x48\x6a\x04\xb6\x76\x42\xd5\x18\x32\xcf\x8d\x3c\xba\x83\x2b\x41\xcc\xa6\x2c\x66\x50\xcb\xad\xbd\x29\x4c\xa9\xc9\xee\x60\x4f\x25\x19\x8d\x76\x53\xd1\x80\x1d\x0c\x30\x57\xbe\x1f\x17\x68\x6e\x3c\xd1\x0c\x70\xb1\x43\x31\x05\xae\xec\x0e\x3a\x00\xae\x94\xd5\x68\xa7\x35\xf5\xaa\x29\xf0\xec\xd8\x93\x4e\xb4\xfd\x35\x85\xf3\x15\xb6\xa9\x15\x6e\x47\xf6\x78\xf2\xd0\x1f\xd8\x2d\x1e\xb9\x71\x41\xd0\xbf\xbb\xcb\x71\xd7\xe9\x83\xa6\xf6\xe0\xc3\xd4\x42\xe7\xfb\xc7\x07\xe2\x0c\xff\x17\xe8\x22\x2d\xd0\x9f\x0f\x83\xfb\xfe\xc3\x23\xfa\xc3\x7a\x44\xe7\x1a\x40\xd2\x11\xa7\x3c\xbd\xba\x02\x58\x16\x54\x0b\xb4\x52\xab\x46\x80\x15\x87\x9d\xe6\x1c\xeb\x0a\x7c\xb5\xb8\x5a\x13\xd4\x68\xd8\xc8\x10\x52\xe2\x54\xe7\xc2\x8e\xc0\x97\x05\xd5\xc2\xae\xd4\xaa\x11\x60\x65\xc2\xd4\xe6\xc2\xae\x0c\xa0\x12\x58\x6b\x88\x5a\x2d\x8d\x0c\x32\xcb\xe6\x4a\x29\xa8\x81\x7d\x67\x7d\x6a\x3a\x39\xd8\x2d\xca\x31\x43\x23\xbb\x7a\x8e\x30\x1d\x0f\xec\xdf\xd1\x4c\x30\x00\x74\x9e\x10\x5f\x4a\x3d\xba\x4a\xd5\x05\xe6\x8b\x76\xf4\xdc\x0d\x2f\x8c\x94\x2c\x8f\x3c\x54\xba\xc5\x9d\x7f\x3b\xda\xc5\xbc\xcc\xf4\x2b\x0d\x57\x2e\xe5\x31\x8a\x32\x12\x1c\x1a\x3a\x61\xae\x10\x3b\x48\xe9\xe4\xd4\x8c\x75\xcf\x73\xcd\xab\xaf\xc8\xb4\x05\x20\xf2\x9c\xf3\xb2\xf2\x63\x89\x4b\x64\x70\x40\x3b\x62\xd3\x05\xb4\x84\xab\x62\x67\x0e\x04\x57\x9c\x02\x57\x43\xa2\xa1\x13\x79\x2d\x7d\x21\xa2\x04\xca\x9e\xdb\xa1\x9b\x94\xdf\x90\x6a\x8d\xb3\x2f\xa9\x66\xdb\x76\xf7\xa1\xc8\x38\x0f\x20\xfd\x46\xac\xa0\xb1\x5a\xbf\xbc\xdd\xdb\x57\x52\xe2\x6e\x16\xce\x2a\x75\x45\xbc\x65\xa2\x1d\x07\xd8\x73\x3b\xdc\x95\x0d\xdc\x96\x04\x1e\x6c\x9c\x92\xef\x73\x87\x06\x4e\xf2\xe7\x98\xf6\x2c\xae\x15\x95\x07\x9a\xfd\x8d\xa7\x78\x1c\xc5\x84\x0d\x91\xb4\xe9\x36\x75\x52\xf4\xfa\x1b\x6d\x42\x12\x23\x11\xcf\xec\xeb\xc2\x16\x3c\x4a\x2f\x44\x1b\xa8\x19\x65\x33\x14\xdd\xd9\xbf\x20\xe4\xd0\x3c\xa3\x66\x59\xfa\x2c\xb3\xcb\x4d\x90\x3e\x01\xd5\x82\x29\x2d\x68\x06\x2d\xf7\x09\xed\x11\xf6\x26\xff\xc1\xae\x0e\x57\x8e\xb6\x19\xa4\xaa\xcf\x83\x8f\x80\xad\xf2\xab\x64\x1d\xc8\xaa\x45\xcd\xd0\xa6\xc5\xe4\x11\x10\x66\xd7\x72\x3a\x54\xb5\xbd\x41\x91\x7d\x6e\x2a\xdb\x69\x82\x28\xcb\xa9\x2c\xa6\x0e\x49\x13\x45\xc6\xc5\x83\xb6\xf5\x3c\x51\x27\xcc\x04\x51\xe3\x3a\xa0\x24\x70\x1b\xbe\xcc\xcf\x0c\x30\x6d\x43\x30\x42\xb2\x0d\x4d\xdc\x2b\x5f\xbc\x75\xeb\x60\xb2\xa4\xe6\x45\xe4\xfe\xcf\xd2\x77\xf4\x39\x88\x9e\x79\x8c\x86\x48\xe0\x99\x0f\x72\x41\xe1\x62\xee\x62\x0f\x6e\x2a\xa9\xb2\x89\x67\x2d\x95\x7c\x39\x58\x4b\x2e\x4d\x1d\x6b\xa9\xd3\xd4\x50\x4b\xa4\x68\x64\xcc\xd6\x68\xe8\xa4\x51\x59\x2d\xb5\xb2\xa2\x36\x5d\xb5\xa7\xfc\x2f\x00\x00\xff\xff\x30\x56\x7e\xb1\x2b\x3f\x00\x00")

func migrations001_squashedSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_squashedSql,
		"migrations/001_squashed.sql",
	)
}

func migrations001_squashedSql() (*asset, error) {
	bytes, err := migrations001_squashedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_squashed.sql", size: 16171, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations002_add_reference_to_emission_requestsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\x4f\xcd\xcd\x2c\x2e\xce\xcc\xcf\x8b\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\x4d\x4b\x2d\x4a\xcd\x4b\x4e\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x33\xd1\x54\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\xb1\xe6\xe5\xe2\xe5\x42\xb6\xc3\x25\xbf\x3c\x8f\x58\x5b\x5c\x82\xfc\x03\x30\xac\xb1\x06\x04\x00\x00\xff\xff\xfc\xa2\x49\x52\xb2\x00\x00\x00")

func migrations002_add_reference_to_emission_requestsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_add_reference_to_emission_requestsSql,
		"migrations/002_add_reference_to_emission_requests.sql",
	)
}

func migrations002_add_reference_to_emission_requestsSql() (*asset, error) {
	bytes, err := migrations002_add_reference_to_emission_requestsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_add_reference_to_emission_requests.sql", size: 178, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations003_update_forfeit_request_created_atSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xb1\x6a\x85\x30\x14\xc6\xf1\x3d\x90\x77\x38\x63\x4b\xf1\x09\x9c\xd4\xa4\x56\x50\x23\x69\x84\x76\x92\xd0\x1e\x6b\x06\x8d\x4d\x8e\x48\xfb\xf4\x77\x70\x11\xee\x1d\x5c\x3f\xfe\xc3\xef\x4b\x12\x78\x99\xdd\x4f\xb0\x84\xd0\xaf\x9c\x65\xb5\x91\x1a\x4c\x96\xd7\x12\x26\x17\xc9\x87\xbf\x61\xf4\x61\x44\x47\x43\xc0\xdf\x0d\x23\x45\x38\xa2\x42\xd5\x7d\xd3\xc2\x57\x40\x4b\xf8\x3d\x58\x02\xf3\xd9\x49\xc8\xab\xb2\x6a\x0d\xf4\xef\x55\x5b\x82\xfc\x30\x3a\x2b\xcc\x93\xec\x54\xf1\x06\xaf\x5a\x35\xa7\xfe\x39\xe5\x8c\xb3\xb3\x40\xf8\x7d\xb9\x68\x10\x5a\x75\xf7\x84\xf4\xea\x03\x21\x1e\xf8\xc9\xcd\x18\xc9\xce\x2b\xec\x8e\x26\xbf\x1d\x0b\xfc\xfb\x05\x53\xce\x6e\x01\x00\x00\xff\xff\xe2\x21\x0a\x66\x2b\x01\x00\x00")

func migrations003_update_forfeit_request_created_atSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations003_update_forfeit_request_created_atSql,
		"migrations/003_update_forfeit_request_created_at.sql",
	)
}

func migrations003_update_forfeit_request_created_atSql() (*asset, error) {
	bytes, err := migrations003_update_forfeit_request_created_atSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/003_update_forfeit_request_created_at.sql", size: 299, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations004_change_asset_lengthSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\x4f\x4a\xcc\x49\xcc\x4b\x4e\x2d\x56\x80\x48\x3a\xfb\xfb\x84\xfa\xfa\x29\x24\x16\x17\xa7\x96\x28\x84\x44\x06\xb8\x2a\x24\x67\x24\x16\x25\x26\x97\xa4\x16\x29\x94\x25\x16\x55\x66\xe6\xa5\x6b\x98\x68\x5a\x73\x71\x21\x1b\xed\x92\x5f\x9e\x47\x2d\xc3\x8d\x35\x15\x42\x83\x3d\xfd\xdc\x15\x8a\x4b\x93\x8a\x4b\x8a\x34\xc0\x8a\x75\x14\x0c\x75\x14\x8c\x35\xad\x01\x01\x00\x00\xff\xff\xbd\xc8\xab\xa6\xd0\x00\x00\x00")

func migrations004_change_asset_lengthSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations004_change_asset_lengthSql,
		"migrations/004_change_asset_length.sql",
	)
}

func migrations004_change_asset_lengthSql() (*asset, error) {
	bytes, err := migrations004_change_asset_lengthSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/004_change_asset_length.sql", size: 208, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations005_change_exchange_kycSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\x4f\x4a\xcc\x49\xcc\x4b\x4e\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\xae\x4c\xb6\xc6\xaf\xda\xd1\xc5\x05\xa6\x38\xb5\x22\x39\x23\x31\x2f\x3d\x35\x3e\x2f\x31\x37\x55\x21\x39\x23\xb1\x28\x31\xb9\x24\xb5\x48\xa1\x2c\xb1\xa8\x32\x33\x2f\x5d\xc3\xcc\x44\xd3\x9a\x8b\x0b\xd9\x29\x2e\xf9\xe5\x79\x5c\xc4\xbb\x06\xc5\x02\xe2\xdd\x95\x5d\x99\xac\x90\x55\x9c\x9f\x97\x64\x0d\x08\x00\x00\xff\xff\xf7\x88\xb7\x42\x07\x01\x00\x00")

func migrations005_change_exchange_kycSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations005_change_exchange_kycSql,
		"migrations/005_change_exchange_kyc.sql",
	)
}

func migrations005_change_exchange_kycSql() (*asset, error) {
	bytes, err := migrations005_change_exchange_kycSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/005_change_exchange_kyc.sql", size: 263, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations006_pending_submitterSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x6b\x32\x51\x0c\x85\xf7\x03\xf3\x1f\xb2\x54\xde\x57\x68\xa5\x76\xe3\xca\xb6\xee\xc4\x42\xd1\xf5\x25\xce\x84\x3b\xa1\x63\xee\x25\x37\xa3\x4e\x7f\x7d\xb1\x63\x3f\xc0\xcf\xed\xe1\x39\x27\x9c\x24\x83\x01\xfc\x5b\xb3\x57\x34\x82\x65\xcc\xb3\x3c\x7b\x7e\x9b\x4e\x16\x53\x58\x4c\x9e\x66\x53\x88\x24\x25\x8b\x77\xa6\x28\x09\x0b\xe3\x20\x2e\xb1\x17\xd2\x04\xbd\x3c\x03\x00\xe0\x12\x56\xec\x13\x29\x63\xfd\xbf\x93\x4e\xb9\x3a\x8c\xc5\x60\xfe\xba\x80\xf9\x72\x36\x3b\xc0\x5d\x9c\xe3\x92\xc4\xd8\xda\xcb\x54\x6c\x56\x35\x17\xee\x9d\x5a\x28\x2a\x54\x2c\x8c\x14\x36\xa8\x2d\x8b\xef\x3d\x3e\xf4\x7f\x6c\x79\xd6\x1f\xdf\xd2\xe6\x52\x0d\xdb\xb9\x0a\x53\x75\x65\xd2\x2f\x4c\xb2\xa1\x3a\x44\x3a\x61\xb8\xbf\x1b\x1e\x5b\x42\x24\xc5\xaf\xe5\x58\x1b\x09\x58\x8c\x3c\xe9\x79\xea\x7a\xeb\xef\x65\xd9\xfe\x9c\x67\xf2\x6c\xe7\x94\x52\x53\xdb\x89\xac\xe1\x68\x74\x14\x56\x28\xa1\x51\xe9\xd0\xc0\x78\x4d\xc9\x70\x1d\x61\xcb\x56\x85\xa6\x53\xe0\x23\x08\x1d\xe0\x26\x96\xb7\xc3\x2c\x6c\x8c\x16\xf4\xc6\x5b\xfe\xfd\xd5\x97\xb0\x95\xbd\x56\x6a\x88\x60\xb8\xaa\xe9\xd2\xaf\x8e\xaf\x81\x7b\xe2\x33\x00\x00\xff\xff\x39\x71\x2f\xbb\x0b\x03\x00\x00")

func migrations006_pending_submitterSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations006_pending_submitterSql,
		"migrations/006_pending_submitter.sql",
	)
}

func migrations006_pending_submitterSql() (*asset, error) {
	bytes, err := migrations006_pending_submitterSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/006_pending_submitter.sql", size: 779, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations007_move_forfeit_requests_to_paymentSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x4f\x84\x30\x14\x84\xef\xfd\x15\x73\xdc\x8d\x6e\xe2\xc1\x78\xe1\x84\x0b\x9e\xea\xae\xd9\xc0\x99\x74\xe1\x2d\xbc\x44\xda\x5a\x1e\x6e\xf0\xd7\x9b\x80\xa8\x21\x26\x72\xfd\xfa\xb5\xd3\xcc\xec\x76\xb8\x69\xb9\x0e\x46\x08\xb9\x57\xc9\xe9\xf8\x82\x2c\x7e\xd4\x29\x1a\xee\xc4\x85\xa1\xb8\xb8\x70\x21\x96\x22\xd0\x5b\x4f\x9d\x74\x91\x8a\x75\x96\x9e\x16\x96\x37\x43\x4b\xf6\xc7\x42\x9c\x24\xd8\x1f\x75\xfe\x7c\xc0\x17\x2b\x64\xf0\x04\xb6\x12\x29\xf5\x3b\x36\x71\x57\xab\xd4\xfe\x94\xc6\x59\xfa\x4f\x36\x36\x0a\x00\xb8\xc2\x99\x6b\xb6\x82\xc3\x31\xc3\x21\xd7\xfa\x76\xe4\x62\x42\x4d\x82\xb2\x31\xc1\x94\x42\x01\xef\x26\x0c\x6c\xeb\xcd\xc3\xfd\x76\xa1\x9a\xd6\xf5\x76\x9d\xca\x96\x85\x8d\x50\x55\x9c\x87\xa2\xef\x28\xe0\xec\xdc\x2b\x19\xbb\x7c\xb2\x2c\xc9\x0b\x55\xf3\xf1\x44\xcb\x40\xe3\x5d\x23\x10\x6e\xa9\x13\xd3\x7a\x5c\x59\x1a\xd7\x4f\x04\x1f\xce\xd2\xe4\xf6\xbe\x5a\xed\xce\xd5\xcc\xa5\x52\x4d\x01\x49\xfa\x14\xe7\x3a\xc3\xdd\xf7\xd7\xd4\x36\x52\xeb\x06\x1b\xa7\xff\x63\xb1\xe8\x33\x00\x00\xff\xff\xd2\x60\x8e\x04\x23\x02\x00\x00")

func migrations007_move_forfeit_requests_to_paymentSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations007_move_forfeit_requests_to_paymentSql,
		"migrations/007_move_forfeit_requests_to_payment.sql",
	)
}

func migrations007_move_forfeit_requests_to_paymentSql() (*asset, error) {
	bytes, err := migrations007_move_forfeit_requests_to_paymentSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/007_move_forfeit_requests_to_payment.sql", size: 547, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations008_use_random_salt_in_txSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\x2f\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\x56\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\x2f\x4e\x2d\x2c\x4d\xcd\x4b\x4e\x55\x08\xf1\x57\x28\x4e\xcc\x29\xb1\xe6\xe2\x42\x36\xd8\x25\xbf\x3c\x8f\x8b\x54\xb3\x41\xe6\x80\xcc\x43\xb7\xc3\x9a\x0b\x10\x00\x00\xff\xff\x79\x02\x93\xee\xb4\x00\x00\x00")

func migrations008_use_random_salt_in_txSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations008_use_random_salt_in_txSql,
		"migrations/008_use_random_salt_in_tx.sql",
	)
}

func migrations008_use_random_salt_in_txSql() (*asset, error) {
	bytes, err := migrations008_use_random_salt_in_txSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/008_use_random_salt_in_tx.sql", size: 180, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations009_use_long_assetsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\x4f\x4a\xcc\x49\xcc\x4b\x4e\x2d\x56\x80\x48\x3a\xfb\xfb\x84\xfa\xfa\x29\x24\x16\x17\xa7\x96\x28\x84\x44\x06\xb8\x2a\x24\x67\x24\x16\x25\x26\x97\xa4\x16\x29\x94\x25\x16\x55\x66\xe6\xa5\x6b\x18\x9a\x69\x5a\x63\x35\x2b\x35\x37\xb3\xb8\x38\x33\x3f\x2f\xbe\x28\xb5\xb0\x34\xb5\xb8\x84\x64\x43\xb9\x90\x1d\xec\x92\x5f\x9e\x47\x2d\x27\x9b\x69\x2a\x84\x06\x7b\xfa\xb9\x2b\x14\x97\x26\x15\x97\x14\x69\x80\x15\xeb\x28\x18\xea\x28\xd0\xc2\x2f\x78\x6d\x03\x04\x00\x00\xff\xff\x6b\x48\x4a\x20\x94\x01\x00\x00")

func migrations009_use_long_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations009_use_long_assetsSql,
		"migrations/009_use_long_assets.sql",
	)
}

func migrations009_use_long_assetsSql() (*asset, error) {
	bytes, err := migrations009_use_long_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/009_use_long_assets.sql", size: 404, mode: os.FileMode(420), modTime: time.Unix(1506428092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations014_balance_historySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x3d\x4f\x84\x40\x10\x86\x6b\xf6\x57\xbc\x25\x44\xe8\x8c\xcd\xb5\x56\x16\x5a\x18\x6b\x32\xc0\x1c\x4c\x5c\x66\x37\xb3\x83\x17\xfc\xf5\xe6\x34\x2a\xb1\xb0\x9b\x8f\x67\x3e\xf2\x74\x1d\x6e\x56\x99\x8d\x9c\xf1\x92\x43\x18\x8d\xaf\xa1\xd3\x10\x19\x8b\x14\x4f\xb6\xf7\x03\x45\xd2\x91\xfb\x2d\x4f\xe4\x5c\x50\x87\x4a\x26\x0c\x32\x17\x36\xa1\x88\x6c\xb2\x92\xed\x78\xe5\xbd\x0d\xd5\x37\x2d\x13\xde\xc8\xc6\x85\xac\xbe\xbb\x6d\x60\x7c\x66\x63\x1d\xb9\xfc\xdd\x5b\x50\xff\xce\x34\xd0\xe4\xd0\x2d\xc6\x36\x54\xb4\xa6\x4d\xfd\x7a\x49\xd4\x8f\x8d\xaf\x4f\xa6\x9e\x1c\x2e\x2b\x17\xa7\x35\xe3\x22\xbe\x7c\xa6\x78\x4f\xca\x3f\x38\xba\xee\x50\x95\x02\x51\x67\x75\x49\x4a\xb1\xc5\x39\x19\x98\x8a\xb0\xe1\xe1\xf9\xe9\x11\x99\xac\x88\xce\xa1\x39\x85\x70\x94\x73\x9f\x2e\x1a\xc2\x64\x29\xff\x2f\xe7\xf4\x11\x00\x00\xff\xff\x5b\x70\xaa\xf4\x52\x01\x00\x00")

func migrations014_balance_historySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations014_balance_historySql,
		"migrations/014_balance_history.sql",
	)
}

func migrations014_balance_historySql() (*asset, error) {
	bytes, err := migrations014_balance_historySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/014_balance_history.sql", size: 338, mode: os.FileMode(420), modTime: time.Unix(1507040372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations015_account_typeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\x31\x0a\x02\x31\x10\x85\xe1\x3e\xa7\x78\xbd\x2c\xd8\x6f\xeb\x15\xac\x97\x31\x19\x35\x30\x3b\x13\xb2\x2f\x48\x6e\x6f\x63\x61\x21\xd8\xfe\xc5\xf7\x2f\x0b\x4e\x7b\x7d\x74\xa1\xe2\xda\x52\x12\xa3\x76\x50\x6e\xa6\x78\xd6\x83\xd1\xe7\x26\x39\xc7\x70\x1e\x90\x52\x90\xc3\xc6\xee\xf8\xb4\x8d\xb3\x29\xaa\x13\x1e\x84\x0f\x33\x14\xbd\xcb\x30\xe2\xbc\xa6\xf4\xad\x5f\xe2\xe5\x7f\xfc\xd2\xa3\xfd\x1a\xac\xef\x00\x00\x00\xff\xff\xb3\x68\xe1\x58\xa6\x00\x00\x00")

func migrations015_account_typeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations015_account_typeSql,
		"migrations/015_account_type.sql",
	)
}

func migrations015_account_typeSql() (*asset, error) {
	bytes, err := migrations015_account_typeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/015_account_type.sql", size: 166, mode: os.FileMode(420), modTime: time.Unix(1509117465, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations016_balance_updates_indexSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\x48\x2a\x8d\x4f\x4a\xcc\x49\xcc\x4b\x4e\x8d\xcf\x4c\x89\xcf\xcc\x4b\x49\xad\x50\xf0\xf7\x53\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x84\xcb\x95\x16\xa4\x24\x96\xa4\x16\x2b\x84\x06\x7b\xfa\xb9\x2b\x78\x38\x06\x7b\x28\x68\x20\xf4\x69\x5a\x73\x71\x21\x5b\xe3\x92\x5f\x9e\xc7\xc5\xe5\x12\xe4\x1f\x80\xc7\x1a\x6b\x2e\x40\x00\x00\x00\xff\xff\x56\xb0\x6c\xd3\x9a\x00\x00\x00")

func migrations016_balance_updates_indexSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations016_balance_updates_indexSql,
		"migrations/016_balance_updates_index.sql",
	)
}

func migrations016_balance_updates_indexSql() (*asset, error) {
	bytes, err := migrations016_balance_updates_indexSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/016_balance_updates_index.sql", size: 154, mode: os.FileMode(420), modTime: time.Unix(1509381954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0010_trades.sql":                            migrations0010_tradesSql,
	"migrations/0011_history_price.sql":                     migrations0011_history_priceSql,
	"migrations/0012_update_pending_tx_op_key.sql":          migrations0012_update_pending_tx_op_keySql,
	"migrations/0013_signer_name.sql":                       migrations0013_signer_nameSql,
	"migrations/001_squashed.sql":                           migrations001_squashedSql,
	"migrations/002_add_reference_to_emission_requests.sql": migrations002_add_reference_to_emission_requestsSql,
	"migrations/003_update_forfeit_request_created_at.sql":  migrations003_update_forfeit_request_created_atSql,
	"migrations/004_change_asset_length.sql":                migrations004_change_asset_lengthSql,
	"migrations/005_change_exchange_kyc.sql":                migrations005_change_exchange_kycSql,
	"migrations/006_pending_submitter.sql":                  migrations006_pending_submitterSql,
	"migrations/007_move_forfeit_requests_to_payment.sql":   migrations007_move_forfeit_requests_to_paymentSql,
	"migrations/008_use_random_salt_in_tx.sql":              migrations008_use_random_salt_in_txSql,
	"migrations/009_use_long_assets.sql":                    migrations009_use_long_assetsSql,
	"migrations/014_balance_history.sql":                    migrations014_balance_historySql,
	"migrations/015_account_type.sql":                       migrations015_account_typeSql,
	"migrations/016_balance_updates_index.sql":              migrations016_balance_updates_indexSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0010_trades.sql":                            &bintree{migrations0010_tradesSql, map[string]*bintree{}},
		"0011_history_price.sql":                     &bintree{migrations0011_history_priceSql, map[string]*bintree{}},
		"0012_update_pending_tx_op_key.sql":          &bintree{migrations0012_update_pending_tx_op_keySql, map[string]*bintree{}},
		"0013_signer_name.sql":                       &bintree{migrations0013_signer_nameSql, map[string]*bintree{}},
		"001_squashed.sql":                           &bintree{migrations001_squashedSql, map[string]*bintree{}},
		"002_add_reference_to_emission_requests.sql": &bintree{migrations002_add_reference_to_emission_requestsSql, map[string]*bintree{}},
		"003_update_forfeit_request_created_at.sql":  &bintree{migrations003_update_forfeit_request_created_atSql, map[string]*bintree{}},
		"004_change_asset_length.sql":                &bintree{migrations004_change_asset_lengthSql, map[string]*bintree{}},
		"005_change_exchange_kyc.sql":                &bintree{migrations005_change_exchange_kycSql, map[string]*bintree{}},
		"006_pending_submitter.sql":                  &bintree{migrations006_pending_submitterSql, map[string]*bintree{}},
		"007_move_forfeit_requests_to_payment.sql":   &bintree{migrations007_move_forfeit_requests_to_paymentSql, map[string]*bintree{}},
		"008_use_random_salt_in_tx.sql":              &bintree{migrations008_use_random_salt_in_txSql, map[string]*bintree{}},
		"009_use_long_assets.sql":                    &bintree{migrations009_use_long_assetsSql, map[string]*bintree{}},
		"014_balance_history.sql":                    &bintree{migrations014_balance_historySql, map[string]*bintree{}},
		"015_account_type.sql":                       &bintree{migrations015_account_typeSql, map[string]*bintree{}},
		"016_balance_updates_index.sql":              &bintree{migrations016_balance_updates_indexSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
